// <auto-generated />
using System;
using DataLayer.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(MusicalShopDbContext))]
    partial class MusicalShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Accessory", b =>
                {
                    b.Property<Guid>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("goods_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("color");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delivery_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset?>("ReceiptDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("receipt_date");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("size");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soft_deleted");

                    b.Property<Guid>("SpecificTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("specific_type_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("GoodsId")
                        .HasName("pk_accessories");

                    b.HasIndex("DeliveryId")
                        .HasDatabaseName("ix_accessories_delivery_id");

                    b.HasIndex("SpecificTypeId")
                        .HasDatabaseName("ix_accessories_specific_type_id");

                    b.ToTable("accessories", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.AudioEquipmentUnit", b =>
                {
                    b.Property<Guid>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("goods_id");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delivery_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset?>("ReceiptDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("receipt_date");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soft_deleted");

                    b.Property<Guid>("SpecificTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("specific_type_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("GoodsId")
                        .HasName("pk_audio_equipment_units");

                    b.HasIndex("DeliveryId")
                        .HasDatabaseName("ix_audio_equipment_units_delivery_id");

                    b.HasIndex("SpecificTypeId")
                        .HasDatabaseName("ix_audio_equipment_units_specific_type_id");

                    b.ToTable("audio_equipment_units", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.GoodsDelivery", b =>
                {
                    b.Property<Guid>("GoodsDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("goods_delivery_id");

                    b.Property<DateTimeOffset?>("ActualDeliveryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actual_delivery_date");

                    b.Property<DateTimeOffset?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expected_delivery_date");

                    b.HasKey("GoodsDeliveryId")
                        .HasName("pk_goods_delivery");

                    b.ToTable("goods_delivery", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.LinkingTables.AccessorySale", b =>
                {
                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sale_id");

                    b.Property<Guid>("AccessoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("accessory_id");

                    b.HasKey("SaleId", "AccessoryId")
                        .HasName("pk_accessory_sale");

                    b.HasIndex("AccessoryId")
                        .HasDatabaseName("ix_accessory_sale_accessory_id");

                    b.ToTable("accessory_sale", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.LinkingTables.AudioEquipmentUnitSale", b =>
                {
                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sale_id");

                    b.Property<Guid>("AudioEquipmentUnitId")
                        .HasColumnType("char(36)")
                        .HasColumnName("audio_equipment_unit_id");

                    b.HasKey("SaleId", "AudioEquipmentUnitId")
                        .HasName("pk_audio_equipment_unit_sale");

                    b.HasIndex("AudioEquipmentUnitId")
                        .HasDatabaseName("ix_audio_equipment_unit_sale_audio_equipment_unit_id");

                    b.ToTable("audio_equipment_unit_sale", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.LinkingTables.MusicalInstrumentSale", b =>
                {
                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sale_id");

                    b.Property<Guid>("MusicalInstrumentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("musical_instrument_id");

                    b.HasKey("SaleId", "MusicalInstrumentId")
                        .HasName("pk_musical_instrument_sale");

                    b.HasIndex("MusicalInstrumentId")
                        .HasDatabaseName("ix_musical_instrument_sale_musical_instrument_id");

                    b.ToTable("musical_instrument_sale", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.LinkingTables.SheetMusicEditionSale", b =>
                {
                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sale_id");

                    b.Property<Guid>("SheetMusicEditionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sheet_music_edition_id");

                    b.HasKey("SaleId", "SheetMusicEditionId")
                        .HasName("pk_sheet_music_edition_sale");

                    b.HasIndex("SheetMusicEditionId")
                        .HasDatabaseName("ix_sheet_music_edition_sale_sheet_music_edition_id");

                    b.ToTable("sheet_music_edition_sale", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.MusicalInstrument", b =>
                {
                    b.Property<Guid>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("goods_id");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delivery_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("manufacturer");

                    b.Property<int>("ManufacturerType")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset?>("ReceiptDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("receipt_date");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int")
                        .HasColumnName("release_year");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soft_deleted");

                    b.Property<Guid>("SpecificTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("specific_type_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("GoodsId")
                        .HasName("pk_musical_instruments");

                    b.HasIndex("DeliveryId")
                        .HasDatabaseName("ix_musical_instruments_delivery_id");

                    b.HasIndex("SpecificTypeId")
                        .HasDatabaseName("ix_musical_instruments_specific_type_id");

                    b.ToTable("musical_instruments", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.ReservationExtraInfo", b =>
                {
                    b.Property<Guid>("ReservationExtraInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("reservation_extra_info_id");

                    b.Property<string>("SecretWord")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("secret_word");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soft_deleted");

                    b.HasKey("ReservationExtraInfoId")
                        .HasName("pk_reservations");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Sale", b =>
                {
                    b.Property<Guid>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("sale_id");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_paid");

                    b.Property<string>("PaidBy")
                        .HasColumnType("longtext")
                        .HasColumnName("paid_by");

                    b.Property<DateTimeOffset?>("ReservationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reservation_date");

                    b.Property<Guid?>("ReservationExtraInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("reservation_extra_info_id");

                    b.Property<DateTimeOffset?>("ReturningDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("returning_date");

                    b.Property<DateTimeOffset?>("SaleDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sale_date");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soft_deleted");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("SaleId")
                        .HasName("pk_sales");

                    b.HasIndex("ReservationExtraInfoId")
                        .IsUnique()
                        .HasDatabaseName("ix_sales_reservation_extra_info_id");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SaleView", b =>
                {
                    b.Property<int>("GoodsUnitsCount")
                        .HasColumnType("int")
                        .HasColumnName("goods_units_count");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_paid");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("paid_by");

                    b.Property<DateTimeOffset?>("ReservationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reservation_date");

                    b.Property<DateTimeOffset?>("ReturningDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("returning_date");

                    b.Property<DateTimeOffset?>("SaleDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sale_date");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sale_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasColumnName("total");

                    b.ToTable((string)null);

                    b.ToView("sales_view", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SheetMusicEdition", b =>
                {
                    b.Property<Guid>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("goods_id");

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("author");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("delivery_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset?>("ReceiptDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("receipt_date");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int")
                        .HasColumnName("release_year");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("soft_deleted");

                    b.Property<Guid>("SpecificTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("specific_type_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("GoodsId")
                        .HasName("pk_sheet_music_editions");

                    b.HasIndex("DeliveryId")
                        .HasDatabaseName("ix_sheet_music_editions_delivery_id");

                    b.HasIndex("SpecificTypeId")
                        .HasDatabaseName("ix_sheet_music_editions_specific_type_id");

                    b.ToTable("sheet_music_editions", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SpecificTypes.AccessorySpecificType", b =>
                {
                    b.Property<Guid>("SpecificTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("specific_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("SpecificTypeId")
                        .HasName("pk_accessory_specific_types");

                    b.ToTable("accessory_specific_types", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SpecificTypes.AudioEquipmentUnitSpecificType", b =>
                {
                    b.Property<Guid>("SpecificTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("specific_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("SpecificTypeId")
                        .HasName("pk_audio_equipment_unit_specific_types");

                    b.ToTable("audio_equipment_unit_specific_types", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SpecificTypes.MusicalInstrumentSpecificType", b =>
                {
                    b.Property<Guid>("SpecificTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("specific_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("SpecificTypeId")
                        .HasName("pk_musical_instrument_specific_types");

                    b.ToTable("musical_instrument_specific_types", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.SpecificTypes.SheetMusicEditionSpecificType", b =>
                {
                    b.Property<Guid>("SpecificTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("specific_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("SpecificTypeId")
                        .HasName("pk_sheet_music_edition_specific_types");

                    b.ToTable("sheet_music_edition_specific_types", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Models.Accessory", b =>
                {
                    b.HasOne("DataLayer.Models.GoodsDelivery", "Delivery")
                        .WithMany("Accessories")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("fk_accessories_goods_delivery_delivery_id");

                    b.HasOne("DataLayer.Models.SpecificTypes.AccessorySpecificType", "SpecificType")
                        .WithMany()
                        .HasForeignKey("SpecificTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accessories_accessory_specific_types_specific_type_id");

                    b.Navigation("Delivery");

                    b.Navigation("SpecificType");
                });

            modelBuilder.Entity("DataLayer.Models.AudioEquipmentUnit", b =>
                {
                    b.HasOne("DataLayer.Models.GoodsDelivery", "Delivery")
                        .WithMany("AudioEquipmentUnits")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("fk_audio_equipment_units_goods_delivery_delivery_id");

                    b.HasOne("DataLayer.Models.SpecificTypes.AudioEquipmentUnitSpecificType", "SpecificType")
                        .WithMany()
                        .HasForeignKey("SpecificTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_equipment_units_audio_equipment_unit_specific_types_sp");

                    b.Navigation("Delivery");

                    b.Navigation("SpecificType");
                });

            modelBuilder.Entity("DataLayer.Models.LinkingTables.AccessorySale", b =>
                {
                    b.HasOne("DataLayer.Models.Accessory", "Accessory")
                        .WithMany()
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_accessory_id");

                    b.HasOne("DataLayer.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_accessory_sale_id");

                    b.Navigation("Accessory");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("DataLayer.Models.LinkingTables.AudioEquipmentUnitSale", b =>
                {
                    b.HasOne("DataLayer.Models.AudioEquipmentUnit", "AudioEquipmentUnit")
                        .WithMany()
                        .HasForeignKey("AudioEquipmentUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_aeu_id");

                    b.HasOne("DataLayer.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_aeu_sale_id");

                    b.Navigation("AudioEquipmentUnit");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("DataLayer.Models.LinkingTables.MusicalInstrumentSale", b =>
                {
                    b.HasOne("DataLayer.Models.MusicalInstrument", "MusicalInstrument")
                        .WithMany()
                        .HasForeignKey("MusicalInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_musical_instrument_id");

                    b.HasOne("DataLayer.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_musical_instrument_sale_id");

                    b.Navigation("MusicalInstrument");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("DataLayer.Models.LinkingTables.SheetMusicEditionSale", b =>
                {
                    b.HasOne("DataLayer.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_sme_sale_id");

                    b.HasOne("DataLayer.Models.SheetMusicEdition", "SheetMusicEdition")
                        .WithMany()
                        .HasForeignKey("SheetMusicEditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_sale_sme_id");

                    b.Navigation("Sale");

                    b.Navigation("SheetMusicEdition");
                });

            modelBuilder.Entity("DataLayer.Models.MusicalInstrument", b =>
                {
                    b.HasOne("DataLayer.Models.GoodsDelivery", "Delivery")
                        .WithMany("MusicalInstruments")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("fk_musical_instruments_goods_delivery_delivery_id");

                    b.HasOne("DataLayer.Models.SpecificTypes.MusicalInstrumentSpecificType", "SpecificType")
                        .WithMany()
                        .HasForeignKey("SpecificTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_musical_instruments_musical_instrument_specific_types_specif");

                    b.Navigation("Delivery");

                    b.Navigation("SpecificType");
                });

            modelBuilder.Entity("DataLayer.Models.Sale", b =>
                {
                    b.HasOne("DataLayer.Models.ReservationExtraInfo", "ReservationExtraInfo")
                        .WithOne("Sale")
                        .HasForeignKey("DataLayer.Models.Sale", "ReservationExtraInfoId")
                        .HasConstraintName("fk_sales_reservations_reservation_extra_info_id");

                    b.Navigation("ReservationExtraInfo");
                });

            modelBuilder.Entity("DataLayer.Models.SheetMusicEdition", b =>
                {
                    b.HasOne("DataLayer.Models.GoodsDelivery", "Delivery")
                        .WithMany("SheetMusicEditions")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("fk_sheet_music_editions_goods_delivery_delivery_id");

                    b.HasOne("DataLayer.Models.SpecificTypes.SheetMusicEditionSpecificType", "SpecificType")
                        .WithMany()
                        .HasForeignKey("SpecificTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sheet_music_editions_sheet_music_edition_specific_types_spec");

                    b.Navigation("Delivery");

                    b.Navigation("SpecificType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("DataLayer.Models.GoodsDelivery", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("AudioEquipmentUnits");

                    b.Navigation("MusicalInstruments");

                    b.Navigation("SheetMusicEditions");
                });

            modelBuilder.Entity("DataLayer.Models.ReservationExtraInfo", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
