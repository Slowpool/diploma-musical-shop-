using BizLogicBase.Common;
using BizLogicBase.Validation;
using BusinessLogicLayer.Misc;
using BusinessLogicLayer.Sales.Dto;
using DataLayer.Models;
using DataLayer.NotMapped;
using DataLayer.SupportClasses;
using DbAccessLayer;
using Humanizer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessLogicLayer.BaseActions;

public abstract class CreateSaleBaseAction(SalesDbAccess dbAccess) : ErrorAdder
{
    public async Task<Guid?> Action(List<Goods> goodsItems, TypeOfNewSale typeOfSale, string? secretWord = null)
    {
        if (!HasGoods(goodsItems))
            return null;

        foreach (var goodsUnit in goodsItems)
        {
            ValidateGoodsUnit(goodsUnit, typeOfSale);
            goodsUnit.Status = typeOfSale switch
            {
                TypeOfNewSale.Sale => GoodsStatus.AwaitingPayment,
                TypeOfNewSale.Reservation => GoodsStatus.Reserved,
                _ => throw new Exception("unknown type of sale"),
            };
        }

        // TODO fix bug when goods is in cart but not in session cart
        //foreach (var goods in dto.GoodsForSale)
        //{
        //    goods.Status = GoodsStatus.InCart;
        //}

        if (HasErrors)
            return null;

        var sale = new Sale()
        {
            // TODO it had better to be autogenerated in db on insert
            SaleDate = DateTime.UtcNow,
            Status = typeOfSale switch
            {
                TypeOfNewSale.Sale => SaleStatus.YetNotPaid,
                TypeOfNewSale.Reservation => SaleStatus.Reserved,
                _ => throw new Exception("UnknownTypeOfSale"),
            }
        };
        switch (typeOfSale)
        {
            case TypeOfNewSale.Sale:
                dbAccess.CreateSaleAndUpdateGoods(sale, goodsItems);
                break;
            case TypeOfNewSale.Reservation:
                if (secretWord is null)
                {
                    AddError("Reservation should contain a secret word. It allows to tell them apart");
                    return null;
                }

                dbAccess.CreateReservationAndUpdateGoods(sale, goodsItems, secretWord);
                break;
        }
        return sale.SaleId;
    }

    protected bool HasGoods(List<Goods> goodsItems)
    {
        if (goodsItems.Count == 0)
        {
            AddError("Список товаров пуст.");
            return false;
        }
        return true;
    }

    protected void ValidateGoodsUnit(Goods goodsUnit, TypeOfNewSale typeOfSale)
    {
        // // TODO handle InCart && AwaitingDelivery as correct status for reservation
        //if (goodsUnit.Status != typeOfSale switch
        //{
        //    TypeOfNewSale.Sale GoodsStatus.InCart
        //})
        if (goodsUnit.Status != GoodsStatus.InCart)
            AddError("В корзине находится товар, статус которого не \"В корзине\"");
        if (goodsUnit.SoftDeleted)
            AddError("В корзину добавлен удаленный товар");
        // TODO load delivery here
        // TODO uncomment
        //if (goodsUnit.Delivery?.LocalActualDeliveryDate is null || goodsUnit.ReceiptDate is null)
        //    AddError("В корзину добавлен непоступивший на склад товар");
        if (goodsUnit.Price <= 0)
            AddError("В корзину добавлен товар с некорректной ценой. Цена должна быть больше 0");
        // if goods unit has a sale, it must be returned. otherwise this loop won't be executed
        foreach (var sale in goodsUnit.Sales)
            if (sale.Status != SaleStatus.Returned)
                AddError("В корзину добавлен товар, который входит в другую продажу и не может быть продан. Guid товара: " + goodsUnit.GoodsId);
    }
}
